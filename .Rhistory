)
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Dashboard de Indicadores"),
dashboardSidebar(
# Sidebar: Menú de Navegación
sidebarMenu(
menuItem("Demografía y Migración", tabName = "demoMig", icon = icon("users")),
menuItem("Educación", icon = icon("graduation-cap"),
menuSubItem("Gasto en Educación", tabName = "gastoEducacion"),
menuSubItem("Inscripciones y Distribución", tabName = "inscripciones"),
menuSubItem("Calidad Educativa", tabName = "calidadEducativa"),
menuSubItem("Costos Educativos", tabName = "costosEducativos")
),
menuItem("Mercado Laboral y Salarios", tabName = "laboral", icon = icon("briefcase")),
menuItem("Económicos y Vivienda", tabName = "economicos", icon = icon("chart-line"))
)
),
dashboardBody(
# Body: Contenido de las pestañas
tabItems(
# { Demografía y Migración }
tabItem(tabName = "demoMig",
h2("Demografía y Migración"),
fluidRow(
# Filtros y botón de descarga en un box
box(
width = 4,
selectInput("entidad", "Seleccione Entidad:",
choices = unique(dfPoblacion$Entidad),
multiple = TRUE,
selected = unique(dfPoblacion$Entidad)[1]),
selectInput("grupo", "Seleccione Grupo de Edad:",
choices = unique(dfPoblacion$Grupo),
multiple = TRUE,
selected = unique(dfPoblacion$Grupo)[1]),
downloadButton("downloadPopulation", "Descargar CSV")
),
# Gráfico en otro box
box(
width = 8,
plotOutput("populationPlot")
)
),
fluidRow(
box(
width = 12,
DT::DTOutput("populationTable")
)
)
),
# } Fin Demografía y Migración
# { Gasto en Educación }
tabItem(tabName = "gastoEducacion",
h2("Gasto en Educación"),
fluidRow(
box(
title = "Gasto por hogar en educación - Nacional",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("gastoEducacionNacional")),
tabPanel("Tabla", dataTableOutput("gastoEducacionNacionalTable"))
),
downloadButton("downloadGastoEducacionNacional", "Descargar CSV")
),
box(
title = "Gasto por hogar en educación - por Estado",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("gastoEducacionEstado")),
tabPanel("Tabla", dataTableOutput("gastoEducacionEstadoTable"))
),
downloadButton("downloadGastoEducacionEstado", "Descargar CSV")
)
)
),
# } Fin Gasto en Educación
# { Inscripciones y Distribución Escolar }
tabItem(tabName = "inscripciones",
h2("Inscripciones y Distribución Escolar"),
fluidRow(
box(
title = "Estudiantes inscritos: Colegios privados vs. públicos - Nacional",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("inscripcionesNacional")),
tabPanel("Tabla", dataTableOutput("inscripcionesNacionalTable"))
),
downloadButton("downloadInscripcionesNacional", "Descargar CSV")
),
box(
title = "Estudiantes inscritos: Colegios privados vs. públicos - por Estado",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("inscripcionesEstado")),
tabPanel("Tabla", dataTableOutput("inscripcionesEstadoTable"))
),
downloadButton("downloadInscripcionesEstado", "Descargar CSV")
)
),
fluidRow(
box(
title = "Inscripciones por nivel educativo",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("inscripcionesNivelEducativo")),
tabPanel("Tabla", dataTableOutput("inscripcionesNivelEducativoTable"))
),
downloadButton("downloadInscripcionesNivelEducativo", "Descargar CSV")
),
box(
title = "Inscripciones por nivel de ingreso del hogar",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("inscripcionesIngresoHogar")),
tabPanel("Tabla", dataTableOutput("inscripcionesIngresoHogarTable"))
),
downloadButton("downloadInscripcionesIngresoHogar", "Descargar CSV")
)
),
fluidRow(
box(
title = "Distribución de colegios privados según tamaño",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("tamanoColegios")),
tabPanel("Tabla", dataTableOutput("tamanoColegiosTable"))
),
downloadButton("downloadTamanoColegios", "Descargar CSV")
),
box(
title = "Distribución de estudiantes según gasto en educación",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("distribucionGastoEducacion")),
tabPanel("Tabla", dataTableOutput("distribucionGastoEducacionTable"))
),
downloadButton("downloadDistribucionGastoEducacion", "Descargar CSV")
)
)
),
# } Fin Inscripciones y Distribución Escolar
# { Calidad Educativa }
tabItem(tabName = "calidadEducativa",
h2("Calidad Educativa: Ratios y Aulas"),
fluidRow(
box(
title = "Estudiantes por aula por grado - público vs. privado",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("estudiantesPorAula")),
tabPanel("Tabla", dataTableOutput("estudiantesPorAulaTable"))
),
downloadButton("downloadEstudiantesPorAula", "Descargar CSV")
),
box(
title = "Ratio alumnos por docente por grado - público vs. privado",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("ratioAlumnosDocentes")),
tabPanel("Tabla", dataTableOutput("ratioAlumnosDocentesTable"))
),
downloadButton("downloadRatioAlumnosDocentes", "Descargar CSV")
)
)
),
# } Fin Calidad Educativa
# { Costos Educativos }
tabItem(tabName = "costosEducativos",
h2("Costos Educativos"),
fluidRow(
box(
title = "Costo de la colegiatura privada - Nacional",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("colegiaturaNacional")),
tabPanel("Tabla", dataTableOutput("colegiaturaNacionalTable"))
),
downloadButton("downloadColegiaturaNacional", "Descargar CSV")
),
box(
title = "Costo de la colegiatura privada - por Estado",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("colegiaturaEstado")),
tabPanel("Tabla", dataTableOutput("colegiaturaEstadoTable"))
),
downloadButton("downloadColegiaturaEstado", "Descargar CSV")
)
),
fluidRow(
box(
title = "Costo de la colegiatura privada - por nivel educativo",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("colegiaturaNivel")),
tabPanel("Tabla", dataTableOutput("colegiaturaNivelTable"))
),
downloadButton("downloadColegiaturaNivel", "Descargar CSV")
)
)
),
# } Fin Costos Educativos
# { Mercado Laboral y Salarios }
tabItem(tabName = "laboral",
h2("Mercado Laboral y Salarios"),
fluidRow(
box(
title = "Hogares por situación laboral de los padres",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("hogaresSituacionLaboral")),
tabPanel("Tabla", dataTableOutput("hogaresSituacionLaboralTable"))
),
downloadButton("downloadHogaresSituacionLaboral", "Descargar CSV")
),
box(
title = "Hogares por situación laboral - por nivel de ingreso",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("hogaresIngreso")),
tabPanel("Tabla", dataTableOutput("hogaresIngresoTable"))
),
downloadButton("downloadHogaresIngreso", "Descargar CSV")
)
),
fluidRow(
box(
title = "Salarios de profesores - Nacional",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("salariosProfesoresNacional")),
tabPanel("Tabla", dataTableOutput("salariosProfesoresNacionalTable"))
),
downloadButton("downloadSalariosProfesoresNacional", "Descargar CSV")
),
box(
title = "Salarios de profesores - por Estado/ciudades principales",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("salariosProfesoresEstado")),
tabPanel("Tabla", dataTableOutput("salariosProfesoresEstadoTable"))
),
downloadButton("downloadSalariosProfesoresEstado", "Descargar CSV")
)
),
fluidRow(
box(
title = "Salario mínimo - Nacional",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("salarioMinimo")),
tabPanel("Tabla", dataTableOutput("salarioMinimoTable"))
),
downloadButton("downloadSalarioMinimo", "Descargar CSV")
)
)
),
# } Fin Mercado Laboral y Salarios
# { Económicos y Vivienda }
tabItem(tabName = "economicos",
h2("Indicadores Económicos y de Vivienda"),
fluidRow(
box(
title = "Costo del m² en ciudades principales",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("costoM2")),
tabPanel("Tabla", dataTableOutput("costoM2Table"))
),
downloadButton("downloadCostoM2", "Descargar CSV")
),
box(
title = "Inflación últimos 10 años",
status = "primary",
solidHeader = TRUE,
width = 6,
tabBox(
width = 12,
tabPanel("Gráfico", plotOutput("inflacion")),
tabPanel("Tabla", dataTableOutput("inflacionTable"))
),
downloadButton("downloadInflacion", "Descargar CSV")
)
)
)
# } Fin Económicos y Vivienda
)
)
)
runApp('DRP_Prueba')
getwd()
list.files("data")
getwd()
list.files("DRP_Prueba/data")
runApp()
getwd()
list.files("data")
runApp()
getwd()
list.files("data")
runApp()
runApp()
runApp()
runApp()
str(dfInmigracionInt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(dfMigracionNac)
runApp()
runApp()
str(dfInflacion)
runApp()
runApp()
runApp()
runApp()
head(dfInflacion)
runApp()
runApp()
runApp()
runApp()
runApp()
dfInflacion
factor(df_plot$Periodo, levels = unique(df_plot$Periodo))
df_plot$Periodo
df_plot <- dfInflacion
factor(df_plot$Periodo, levels = unique(df_plot$Periodo))
df_plot$Periodo <- factor(df_plot$Periodo, levels = unique(df_plot$Periodo))
df_plot
ggplot(df_plot, aes(x = Periodo, y = Inflacion, group = 1)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "blue", size = 3) +
labs(x = "Periodo", y = "Inflación (%)", title = "Inflación últimos 10 años") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DT::datatable(dfInflacion, options = list(pageLength = 10))
runApp()
runApp()
runApp()
shiny::runApp()
str(dfSalarioMinimo)
dfSalarioMinimo
dfSalarioMinimo %>% print(n = 30)
runApp()
dfSalarioProfesores
str(dfSalarioProfesores)
runApp()
dfSituacionLaboral <- readRDS("data/PadresTrabajanCom.rds")
dfGastoEducacion <- readRDS("data/GastoEducacion.rds")
str(dfSituacionLaboral)
shiny::runApp()
dfSituacionLaboral
runApp()
runApp()
runApp()
str(dfGastoEducacion)
runApp()
runApp()
shiny::runApp()
dfGastoEducacion
runApp()
dfAlumnosPorAula <- readRDS("data/AlumnosPorAula.rds")
dfAlumnosPorDocente <- readRDS("data/AlumnosPorDocente.rds")
str(dfAlumnosPorAula)
shiny::runApp()
runApp()
dfAlumnosPorAula <- dfAlumnosPorAula %>%
mutate(across(where(is.character), ~ iconv(.x, from = "latin1", to = "UTF-8")))
runApp()
dfPoblacion
dfEstudiantesNivelControl <- readRDS("data/EstudiantesNivelControl.rds")
shiny::runApp()
str(dfAlumnosPorDocente)
runApp()
str(dfEstudiantesNivelControl)
runApp()
runApp()
str(dfEstudiantesNivelControl)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
# Cargar dataframes desde archivos RDS
# Asegúrate de que la carpeta 'data' esté en el mismo directorio que esta app
dfPoblacion <- readRDS("data/Poblacion.rds")
dfInmigracionInt <- readRDS("data/Inmigracion_int.rds")
dfMigracionNac <- readRDS("data/Migracion_nac.rds")
dfSalarioMinimo <- readRDS("data/SalariosMinimos.rds")
dfSalarioProfesores <- readRDS("data/SalariosProfesores.rds")
dfInflacion <- readRDS("data/Inflacion.rds")
dfSituacionLaboral <- readRDS("data/PadresTrabajanCom.rds")
dfGastoEducacion <- readRDS("data/GastoEducacion.rds")
dfEstudiantesNivelControl <- readRDS("data/EstudiantesNivelControl.rds")
dfAlumnosPorAula <- readRDS("data/AlumnosPorAula.rds")
dfAlumnosPorDocente <- readRDS("data/AlumnosPorDocente.rds")
shiny::runApp()
dfEstudiantesNivelControl
dfEstudiantesNivelControl <- readRDS("data/EstudiantesNivelControl.rds")
dfEstudiantesNivelControl
dfEstudiantesNivelControl <- readRDS("data/EstudiantesNivelControl.rds") %>% mutate(CONTROL = recode(CONTROL, "PÃºblico" = "Público"),
NIVEL = recode(NIVEL, "TÃ©cnica" = "Técnica"))
library(dplyr)
dfEstudiantesNivelControl <- readRDS("data/EstudiantesNivelControl.rds") %>% mutate(CONTROL = recode(CONTROL, "PÃºblico" = "Público"),
NIVEL = recode(NIVEL, "TÃ©cnica" = "Técnica"))
dfEstudiantesNivelControl
shiny::runApp()
dfTamanoPrivadas <- readRDS("data/TamanoColegiosPrivados.rds")
str(dfTamanoPrivadas)
dfTamanoPrivadas <- readRDS("data/TamanoColegiosPrivados.rds")
dfTamanoPrivadas
shiny::runApp()
dfTamanoPrivadas
shiny::runApp()
runApp()
runApp()
runApp()
dfTamanoPrivadas <- readRDS("data/EstudiantesNivelControl.rds")
str(dfTamanoPrivadas)
dfTamanoPrivadas <- readRDS("data/TamanoColegiosPrivados.rds") %>% mutate(PERIODO = factor(PERIODO, c("2019-2020", "2020-2021", "2021-2022", "2022-2023", "2023-2024")))
dfEstudiantesNivelControl <- readRDS("data/EstudiantesNivelControl.rds")
dfEstudiantesNivelControl
dfEstudiantesNivelControl <- readRDS("data/EstudiantesNivelControl.rds") %>% mutate(CONTROL = recode(CONTROL, "PÃºblico" = "Público"),
NIVEL = recode(NIVEL, "TÃ©cnica" = "Técnica"))
library(dplyr)
dfEstudiantesNivelControl <- readRDS("data/EstudiantesNivelControl.rds") %>% mutate(CONTROL = recode(CONTROL, "PÃºblico" = "Público"),
NIVEL = recode(NIVEL, "TÃ©cnica" = "Técnica"))
dfEstudiantesControlIngreso <- readRDS("data/EstudiantesControlIngreso.rds")
dfEstudiantesControlIngreso <- readRDS("data/EstudiantesControlIngreso.rds")
str(dfEstudiantesControlIngreso)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
str(dfEstudiantesControlIngreso)
dfEstudiantesControlIngreso <- readRDS("data/EstudiantesControlIngreso.rds")
dfEstudiantesControlIngreso <- readRDS("data/EstudiantesControlIngreso.rds")
str(dfEstudiantesControlIngreso)
shiny::runApp()
runApp()
dfEstudiantesGastoEdu <- readRDS("data/EstudiantesGastoEdu.rds")
str(dfEstudiantesGastoEdu)
shiny::runApp()
dfGastoColegiatura <- readRDS("data/GastoColegiatura.rds")
str(dfGastoColegiatura)
dfGastoColegiatura
shiny::runApp()
runApp()
